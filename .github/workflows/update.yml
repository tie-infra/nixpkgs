name: Update
on:
  workflow_dispatch:
env:
  INPUT_BASE: nixos-23.05
  INPUT_HEAD: nixos-23.05
jobs:
  # Shallow clone from the base commit that is both in Nixpkgs and our
  # repository to speed up updates. Note that the target branch must exist.
  check:
    runs-on: ubuntu-latest
    outputs:
      repo: ${{ steps.check.outputs.repo }}
      depth: ${{ steps.check.outputs.depth }}
      ref: ${{ steps.check.outputs.ref }}
      update: ${{ steps.check.outputs.update }}
    steps:
      - name: Compare branches
        id: check
        uses: actions/github-script@v6.4.1
        with:
          script: |
            const {
              INPUT_BASE: base,
              INPUT_HEAD: head,
            } = process.env

            const {
              owner: targetOwner,
              repo: targetRepo,
            } = context.repo

            const {
              owner: sourceOwner,
              repo: sourceRepo,
            } = await (async() => {
              const resp = await github.rest.repos.get(context.repo)
              if (!resp.data.fork) {
                throw new Error("repository is not a fork")
              }

              const {
                source: {
                  name: repo,
                  owner: {
                    login: owner,
                  },
                },
              } = resp.data

              return { owner, repo }
            })()

            const { depth, update } = await (async() => {
              const basehead = `${sourceOwner}:${sourceRepo}:${base}...${targetOwner}:${targetRepo}:${head}`

              let resp = await github.rest.repos.compareCommitsWithBasehead({
                owner: sourceOwner,
                repo: sourceRepo,
                basehead,
              })

              const { behind_by } = resp.data

              return { depth: behind_by, update: behind_by != 0 }
            })()

            core.setOutput('repo', `${sourceOwner}/${sourceRepo}`)
            core.setOutput('depth', depth)
            core.setOutput('ref', base)
            core.setOutput('update', update)

  update:
    runs-on: ubuntu-latest
    needs: check
    if: ${{ fromJSON(needs.check.outputs.update) }}
    steps:
      - name: Set up Git
        run: |
          git config --global user.name actions-user
          git config --global user.email actions@github.com
          git config --global pack.packSizeLimit 1g # github limits pushes to ~2g

      - name: Checkout repository
        uses: actions/checkout@v3.5.3
        with:
          repository: ${{ needs.check.outputs.repo }}
          fetch-depth: ${{ needs.check.outputs.depth }}
          ref: ${{ needs.check.outputs.ref }}

      - name: Apply patches
        run: |
          for patchurl in $(
            # libgdiplus: 6.0.5 -> 6.1
            echo https://github.com/NixOS/nixpkgs/pull/236930.patch

            # fetchSteamDepot: init
            echo https://github.com/NixOS/nixpkgs/compare/master...tie:nixpkgs:fetch-steam.patch

            # eco-server: init at 0.9.7.13-beta-release-506
            # Note that this requires fetchSteamDepot patch above.
            echo https://github.com/NixOS/nixpkgs/compare/tie:nixpkgs:fetch-steam...tie:nixpkgs:eco-game-server.patch

            # edac-utils: unstable-2015-01-07 -> unstable-2023-01-30
            echo https://github.com/NixOS/nixpkgs/pull/234603.patch

            # pufferpanel: build frontend from source
            echo https://github.com/NixOS/nixpkgs/pull/234124.patch
          ); do
            echo "::group::Apply $patchurl"
            patch=$(curl -L -s -f "$patchurl")
            git am --reject --whitespace=nowarn <<<"$patch"
            echo "::endgroup::"
          done

      - name: Push changes
        run: |
          git push --force -- "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY.git" HEAD:"$INPUT_HEAD"
